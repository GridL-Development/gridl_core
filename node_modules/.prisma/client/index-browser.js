
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.3.1
 * Query Engine version: acc0b9dd43eb689cbd20c9470515d719db10d0b0
 */
Prisma.prismaVersion = {
  client: "6.3.1",
  engine: "acc0b9dd43eb689cbd20c9470515d719db10d0b0"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.ConfigScalarFieldEnum = {
  id: 'id',
  defaultIsoCurrencyId: 'defaultIsoCurrencyId',
  defaultCurrencyId: 'defaultCurrencyId',
  defaultTopLevelName: 'defaultTopLevelName',
  defaultTopLevelDescription: 'defaultTopLevelDescription',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  iso_3166_2_code: 'iso_3166_2_code',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  authProviderId: 'authProviderId',
  role: 'role',
  countryId: 'countryId',
  permissions: 'permissions',
  clientId: 'clientId',
  defaultInstance: 'defaultInstance',
  selectedInstance: 'selectedInstance',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  status: 'status',
  countryId: 'countryId',
  contactId: 'contactId',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  clientId: 'clientId',
  actions: 'actions',
  subjects: 'subjects',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InstanceScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  clientId: 'clientId',
  description: 'description',
  status: 'status',
  userIds: 'userIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VersionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  begin: 'begin',
  end: 'end',
  startOfPlan: 'startOfPlan',
  description: 'description',
  isDefault: 'isDefault',
  isActuals: 'isActuals',
  status: 'status',
  clientId: 'clientId',
  instanceId: 'instanceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CurrencyIsoCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CurrencyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  currencyIsoCodeId: 'currencyIsoCodeId',
  assignedLevels: 'assignedLevels',
  isDefault: 'isDefault',
  clientId: 'clientId',
  instanceId: 'instanceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LevelScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  isRoot: 'isRoot',
  description: 'description',
  parentId: 'parentId',
  clientId: 'clientId',
  instanceId: 'instanceId',
  currencyId: 'currencyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LevelAttributeAndValueScalarFieldEnum = {
  id: 'id',
  levelId: 'levelId',
  clientId: 'clientId',
  instanceId: 'instanceId',
  attributeId: 'attributeId',
  attributeValueId: 'attributeValueId',
  levelCode: 'levelCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LevelAttributeValueScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  attributeId: 'attributeId',
  parentId: 'parentId',
  clientId: 'clientId',
  instanceId: 'instanceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LevelAttributeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  clientId: 'clientId',
  instanceId: 'instanceId',
  attributeValueDefault: 'attributeValueDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountAttributeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  attributeValueDefault: 'attributeValueDefault',
  clientId: 'clientId',
  instanceId: 'instanceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountAttributeValueScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  attributeId: 'attributeId',
  parentId: 'parentId',
  clientId: 'clientId',
  instanceId: 'instanceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountAttributeAndValueScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  clientId: 'clientId',
  instanceId: 'instanceId',
  attributeId: 'attributeId',
  attributeValueId: 'attributeValueId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  isRoot: 'isRoot',
  isModelRoot: 'isModelRoot',
  accountType: 'accountType',
  accountTypeTag: 'accountTypeTag',
  group: 'group',
  plannedBy: 'plannedBy',
  actualsBy: 'actualsBy',
  displayAs: 'displayAs',
  containsSalaryInfo: 'containsSalaryInfo',
  description: 'description',
  instanceId: 'instanceId',
  clientId: 'clientId',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DimensionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  dimensionValueDefault: 'dimensionValueDefault',
  clientId: 'clientId',
  instanceId: 'instanceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DimensionValueScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  parentId: 'parentId',
  clientId: 'clientId',
  instanceId: 'instanceId',
  dimensionId: 'dimensionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DimensionValueAttributeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  clientId: 'clientId',
  instanceId: 'instanceId',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt'
};

exports.Prisma.DimensionValueAttributeValueScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  attributeId: 'attributeId',
  clientId: 'clientId',
  parentId: 'parentId',
  instanceId: 'instanceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DimensionValueAttributeAndValueScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  instanceId: 'instanceId',
  attributeId: 'attributeId',
  attributeValueId: 'attributeValueId',
  dimensionValueId: 'dimensionValueId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ModelScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  dimensionality: 'dimensionality',
  status: 'status',
  isDefault: 'isDefault',
  instanceId: 'instanceId',
  clientId: 'clientId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  rootAccountId: 'rootAccountId'
};

exports.Prisma.ModelAccountStructureScalarFieldEnum = {
  id: 'id',
  instanceId: 'instanceId',
  isRoot: 'isRoot',
  clientId: 'clientId',
  parentId: 'parentId',
  modelId: 'modelId',
  accountId: 'accountId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ModelDataScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  instanceId: 'instanceId',
  modelId: 'modelId',
  versionId: 'versionId',
  levelId: 'levelId',
  accountId: 'accountId',
  timespan: 'timespan',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ModelDataCalculationsScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  instanceId: 'instanceId',
  modelId: 'modelId',
  versionId: 'versionId',
  levelId: 'levelId',
  accountId: 'accountId',
  modelAccountId: 'modelAccountId',
  calculations: 'calculations',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TableScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  instanceId: 'instanceId',
  name: 'name',
  code: 'code',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status'
};

exports.Prisma.TableDataScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  instanceId: 'instanceId',
  tableId: 'tableId',
  rowKey: 'rowKey',
  versionId: 'versionId',
  levelId: 'levelId',
  data: 'data',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DataSourceScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  instanceId: 'instanceId',
  name: 'name',
  code: 'code',
  credentialId: 'credentialId',
  description: 'description',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DataSourceTaskScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  instanceId: 'instanceId',
  name: 'name',
  code: 'code',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DataSourceLoaderScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  instanceId: 'instanceId',
  name: 'name',
  code: 'code',
  loaderType: 'loaderType',
  sourceTable: 'sourceTable',
  planningTable: 'planningTable',
  planningElementId: 'planningElementId',
  planningElementType: 'planningElementType',
  versionId: 'versionId',
  createElementIfNotFound: 'createElementIfNotFound',
  settingsOptions: 'settingsOptions',
  columnMappings: 'columnMappings',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DataSourceCredentialScalarFieldEnum = {
  id: 'id',
  clientId: 'clientId',
  instanceId: 'instanceId',
  name: 'name',
  code: 'code',
  description: 'description',
  type: 'type',
  credentialId: 'credentialId',
  credentialKey: 'credentialKey',
  credentialSecret: 'credentialSecret',
  credentialToken: 'credentialToken',
  credentialTokenSecret: 'credentialTokenSecret',
  credentialHostname: 'credentialHostname',
  credentialUsername: 'credentialUsername',
  fingerprint: 'fingerprint',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.userRole = exports.$Enums.userRole = {
  Admin: 'Admin',
  Manager: 'Manager',
  User: 'User'
};

exports.clientStatus = exports.$Enums.clientStatus = {
  Active: 'Active',
  Inactive: 'Inactive'
};

exports.instanceStatus = exports.$Enums.instanceStatus = {
  Active: 'Active',
  Inactive: 'Inactive'
};

exports.versionStatus = exports.$Enums.versionStatus = {
  Locked: 'Locked',
  Unlocked: 'Unlocked',
  Archived: 'Archived'
};

exports.YesNo = exports.$Enums.YesNo = {
  Yes: 'Yes',
  No: 'No'
};

exports.AccountType = exports.$Enums.AccountType = {
  GL: 'GL',
  Custom: 'Custom'
};

exports.AccountTypeTag = exports.$Enums.AccountTypeTag = {
  PnL: 'PnL',
  BalanceSheet: 'BalanceSheet',
  Custom: 'Custom',
  Model: 'Model'
};

exports.ActPlanBy = exports.$Enums.ActPlanBy = {
  Balance: 'Balance',
  Delta: 'Delta'
};

exports.ActActualsBy = exports.$Enums.ActActualsBy = {
  Balance: 'Balance',
  Delta: 'Delta'
};

exports.ActDisplayAs = exports.$Enums.ActDisplayAs = {
  Currency: 'Currency',
  Decimal: 'Decimal',
  Percentage: 'Percentage'
};

exports.ModelStatus = exports.$Enums.ModelStatus = {
  Active: 'Active',
  Inactive: 'Inactive'
};

exports.DataSourceType = exports.$Enums.DataSourceType = {
  CSV: 'CSV',
  Excel: 'Excel',
  Quickbooks: 'Quickbooks',
  JSON: 'JSON',
  NetSuite: 'NetSuite',
  Adaptive: 'Adaptive'
};

exports.DataSourceLoaderType = exports.$Enums.DataSourceLoaderType = {
  Level: 'Level',
  Account: 'Account',
  Dimension: 'Dimension',
  Attribute: 'Attribute',
  Planning: 'Planning'
};

exports.DatasourceCredentialAuthType = exports.$Enums.DatasourceCredentialAuthType = {
  Basic: 'Basic',
  PrivateKey: 'PrivateKey'
};

exports.TableColumnType = exports.$Enums.TableColumnType = {
  Text: 'Text',
  Number: 'Number',
  Date: 'Date',
  Checkbox: 'Checkbox',
  Dimension: 'Dimension'
};

exports.Prisma.ModelName = {
  Config: 'Config',
  Country: 'Country',
  User: 'User',
  Client: 'Client',
  Permission: 'Permission',
  Instance: 'Instance',
  Version: 'Version',
  CurrencyIsoCode: 'CurrencyIsoCode',
  Currency: 'Currency',
  Level: 'Level',
  LevelAttributeAndValue: 'LevelAttributeAndValue',
  LevelAttributeValue: 'LevelAttributeValue',
  LevelAttribute: 'LevelAttribute',
  AccountAttribute: 'AccountAttribute',
  AccountAttributeValue: 'AccountAttributeValue',
  AccountAttributeAndValue: 'AccountAttributeAndValue',
  Account: 'Account',
  Dimension: 'Dimension',
  DimensionValue: 'DimensionValue',
  DimensionValueAttribute: 'DimensionValueAttribute',
  DimensionValueAttributeValue: 'DimensionValueAttributeValue',
  DimensionValueAttributeAndValue: 'DimensionValueAttributeAndValue',
  Model: 'Model',
  ModelAccountStructure: 'ModelAccountStructure',
  ModelData: 'ModelData',
  ModelDataCalculations: 'ModelDataCalculations',
  Table: 'Table',
  TableData: 'TableData',
  DataSource: 'DataSource',
  DataSourceTask: 'DataSourceTask',
  DataSourceLoader: 'DataSourceLoader',
  DataSourceCredential: 'DataSourceCredential'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
